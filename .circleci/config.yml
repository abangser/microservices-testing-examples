version: 2.1

orbs:
  buildevents: honeycombio/buildevents@0.7.1
  docker: circleci/docker@2.1.3
  maven: circleci/maven@1.3.0

executors:
  linuxgo:
    docker:
      - image: cimg/go:1.18

commands:

  envvars:
    steps:
      - run: echo ${BUILDEVENTS_SPAN_ID}

  install-xpath:
    steps:
      - run: |
          buildevents cmd ${CIRCLE_WORKFLOW_ID} ${BUILDEVENTS_SPAN_ID} 'apt update' -- \
            sudo apt update
      - run: |
          buildevents cmd ${CIRCLE_WORKFLOW_ID} ${BUILDEVENTS_SPAN_ID} 'install xpath' -- \
            sudo apt install libxml-xpath-perl
  
  service-build:
    parameters:
      service:
        type: string

    steps:
      - run: set -e
      - run: ./.circleci/scripts/<< parameters.service >>-build.sh
      - buildevents/add_context:
          field_name: ci.reporting.integration.completed
          field_value: $(xpath -q -e 'failsafe-summary/completed/text()'  << parameters.service >>/target/failsafe-reports/failsafe-summary.xml)
      - buildevents/add_context:
          field_name: ci.reporting.integration.errors
          field_value: $(xpath -q -e 'failsafe-summary/errors/text()'  << parameters.service >>/target/failsafe-reports/failsafe-summary.xml)
      - buildevents/add_context:
          field_name: ci.reporting.integration.failures
          field_value: $(xpath -q -e 'failsafe-summary/failures/text()'  << parameters.service >>/target/failsafe-reports/failsafe-summary.xml)
      - buildevents/add_context:
          field_name: ci.reporting.integration.skipped
          field_value: $(xpath -q -e 'failsafe-summary/skipped/text()'  << parameters.service >>/target/failsafe-reports/failsafe-summary.xml)

jobs:

  setup:
    executor: linuxgo
    steps:
      - buildevents/start_trace

  watch:
    executor: linuxgo
    steps:
      - buildevents/watch_build_and_finish

  build:
    machine:
      image: ubuntu-2004:202201-02

    environment:
      PACT_CLI_IMG: pactfoundation/pact-cli:0.12.3.0
      PACT_BROKER_URL: localhost:9292
    
    parameters:
      service:
        type: string

    steps:
      - buildevents/with_job_span:
          steps:
            - checkout
            
            - run:
                command: |
                  BUILDEVENTS_SPAN_ID=$(echo ${CIRCLE_JOB}-${CIRCLE_NODE_INDEX} | sha256sum | awk '{print $1}')
                  echo "export BUILDEVENTS_SPAN_ID=\"${BUILDEVENTS_SPAN_ID}\"" >> $BASH_ENV
                  echo $BUILDEVENTS_SPAN_ID

            - run:
                name: Update java
                command: |
                  buildevents cmd ${CIRCLE_WORKFLOW_ID} ${BUILDEVENTS_SPAN_ID} 'add java apt repository' -- \
                    sudo add-apt-repository ppa:linuxuprising/java -y
                  buildevents cmd ${CIRCLE_WORKFLOW_ID} ${BUILDEVENTS_SPAN_ID} 'update new apt repository' -- \
                    sudo apt update
                  buildevents cmd ${CIRCLE_WORKFLOW_ID} ${BUILDEVENTS_SPAN_ID} 'install java17' -- \
                    sudo apt-get install -y oracle-java17-installer oracle-java17-set-default

            - envvars

            - install-xpath

            - run:
                name: Start dependencies with docker-compose
                command: |
                  export BUILDEVENTS_SPAN_ID=$(echo ${CIRCLE_JOB}-${CIRCLE_NODE_INDEX} | sha256sum | awk '{print $1}')
                  buildevents cmd ${CIRCLE_WORKFLOW_ID} ${BUILDEVENTS_SPAN_ID} 'run dependencies' -- \
                    docker-compose -f pact-tools/pact-broker/docker-compose.yml up
                background: true

#            - service-build:
#                service: << parameters.service >>
#
#            - run:
#                name: Stop dependencies with docker-compose
#                command: |
#                  BUILDEVENTS_SPAN_ID=$(echo ${CIRCLE_JOB}-${CIRCLE_NODE_INDEX} | sha256sum | awk '{print $1}')
#                  buildevents cmd ${CIRCLE_WORKFLOW_ID} ${BUILDEVENTS_SPAN_ID} 'clean up dependencies' -- \
#                    docker-compose -f pact-tools/pact-broker/docker-compose.yml down
#                when: always


workflows:
  build_and_test:
    jobs:
      - setup
      - watch:
          requires:
            - setup
      - build:
          requires:
            - setup
          matrix:
            parameters:
              service: [
                "credit-score-service",
#                "special-membership-service",
#                "welcome-member-email-service",
              ]
