# This workflow will send a trace of each build step to Honeycomb.

# A free Honeycomb account—this includes 20 million events per month, which is ample event
# volume to support very large and complex production build pipelines. It should
# accommodate almost all buildevents use cases with ease.

# To get started:
# 1. Visit the Honeycomb Sign Up Page and create an account.
# 2. Name your team (any name—like your company name, for example—will do).
# 3. Copy your API key.
#     * If you’re a new user, you’ll see your API key on the screen that’s displayed as Honeycomb waits to receive your data.
#     * If you’re an existing user, you can find your API key by clicking on "Environments" and selecting "Manage Environments". 
# 4. Create a GitHub Action Secret with this API key named "BUILDEVENT_APIKEY"

name: Trace Workflow

on:
  push:
    branches: ['**']

jobs:

  trace-workflow:
    runs-on: ubuntu-latest
    env:
      BUILDEVENT_FILE: "../buildevents.txt"

    steps:
      - uses: honeycombio/gha-buildevents@v1
        with:
          # Required: a Honeycomb API key - needed to send traces.
          apikey: ${{ secrets.BUILDEVENT_APIKEY }}

          # Required: the Honeycomb dataset to send traces to.
          dataset: buildevents

          # Optional: status, this will be used in the post section and sent
          # as status of the trace. Set on the final job of a workflow to signal for the trace to # end
          # job-status has been deprecated
          job-status: ${{ job.status }}

          # Optional: this should only be used in combination with matrix builds. Set
          # this to a value uniquely describing each matrix configuration.
          # matrix-key: ${{ matrix.value }}

      - name: "Custom run step"
        run: |
          # Each Job MUST include unique STEP IDs to ensure each job's spans are properly organized together.
          STEP_ID=$(shuf -i 1-100000 -n 1)
          STEP_START=$(date +%s)

          sleep 10

          : '
          By default buildevents will add a number of additional fields from the environment, such as
          the branch name, the repository, the build number, and so on.

          In addition, you can add custom fields by using the globally set BUILDEVENT_FILE. This variable is
          used as the path of a text file holding arbitrary key=val pairs (multi-line-capable, logfmt style)
          that will be added to all remaining Honeycomb events.

          Note that the entries must be space deliminated. It is best to prepend a space before adding a new field.
          '
          echo " runner-uname=\"$(uname -a)\"" >> $BUILDEVENT_FILE

          : '
          The final parameter of the command is NAME. This is used to label the span when viewing a trace.
          When the ID is human readable, it is easy to reuse this ID as the name. In the event of autogenerated
          IDs, make sure to set a useful NAME as the final parameter of the step command.
          '
          buildevents step $TRACE_ID $STEP_ID $STEP_START 'custom run step'

      - name: "Step with multiple sub commands"
        run: |
          STEP_ID=sub-commands
          STEP_START=$(date +%s)

          : '
          Not all commands within a run step need to wrapped with the buildevents cmd call.

          The cmd mode invokes an individual command that is part of a step, such as running DB migrations
          or running a specific test suite. It must be able to be expressed as a single shell command - either
          a process like go test or a shell script. The command to run is the final argument to buildevents and
          will be launched via bash -c using exec. You can specify an alternate shell using the -s/--shell flag
          but it must support the the -c flag.
          '

          buildevents cmd $TRACE_ID $STEP_ID sleep-5 -- sleep 5
          buildevents cmd $TRACE_ID $STEP_ID sleep-10 -- sleep 10

          sleep 15
          buildevents step $TRACE_ID $STEP_ID $STEP_START $STEP_ID

      - name: "Honeycomb: Start JDK setup"
        run: |
          echo "STEP_ID=setup-jdk" >> $GITHUB_ENV
          echo "STEP_START=$(date +%s)" >> $GITHUB_ENV

          : '
          These environment variables will be used by the finish step, and therefore must be exported.

          While custom run steps can be instrumented directly as shown in the previous steps, you can
          use this technique of a wrapping 'start' and 'finish' step to capture 3rd party actions in
          spans, or to capture a group of steps as a single span.
          '

      - name: "Set up JDK"
        uses: actions/setup-java@v3.4.1
        with:
          java-version: 14
          distribution: 'adopt'
      
      - name: "Honeycomb: Finish JDK setup"
        run: buildevents step $TRACE_ID $STEP_ID $STEP_START $STEP_ID

      - name: "Add span level fields"
        run: |
          STEP_ID=add-fields
          STEP_START=$(date +%s)

          : '
          Some fields may only be required for a specific span, in this case, you can
          override the BUILDEVENT_FILE in a single step.

          Keep in mind that if you want the global varaibles as well, you will need to
          capture them in the temporary buildevent file.
          '
          cp $BUILDEVENT_FILE ../add-fields-buildevents_file.txt
          BUILDEVENT_FILE=../add-fields-buildevents_file.txt
          echo " span-specific-field=${GITHUB_STEP_SUMMARY}" >> $BUILDEVENT_FILE

          buildevents step $TRACE_ID $STEP_ID $STEP_START $STEP_ID

      - name: "Intentionally failing step"
        id: failing-step
        run: |
          echo "STEP_ID=failing-step" >> $GITHUB_ENV
          echo "STEP_START=$(date +%s)" >> $GITHUB_ENV

          // Intentionally fail this step
          false

      - name: "Honeycomb: Finish failing step"
        run: |
          echo " status=${{ steps.failing-step.outcome }}" >> $BUILDEVENTS_FILE
          buildevents step $TRACE_ID $STEP_ID $STEP_START $STEP_ID
        # By always running, this span will be sent even if the previous step fails.
        # This is important why trying to triage failing workflows.
        if: always()
      
      - name: "Will not run"
        run: |
          echo """
          Due to the previously failing step, this will never run.

          It is here to showcase how by default the workflow will end after a failing step.
          """

# gha-buildevents will automatically run as a post action and execute 'buildevents build'
# You can reach this trace via ui.honeycomb.io or clicking on the link in the 'Post Run honeycombio/gha-buildevents@v1' step